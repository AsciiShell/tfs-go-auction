// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	gomock "github.com/golang/mock/gomock"
	lot "gitlab.com/asciishell/tfs-go-auction/internal/lot"
	session "gitlab.com/asciishell/tfs-go-auction/internal/session"
	user "gitlab.com/asciishell/tfs-go-auction/internal/user"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Migrate mocks base method
func (m *MockStorage) Migrate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Migrate")
}

// Migrate indicates an expected call of Migrate
func (mr *MockStorageMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockStorage)(nil).Migrate))
}

// GetUser mocks base method
func (m *MockStorage) GetUser(u *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser
func (mr *MockStorageMockRecorder) GetUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), u)
}

// AddUser mocks base method
func (m *MockStorage) AddUser(u *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser
func (mr *MockStorageMockRecorder) AddUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorage)(nil).AddUser), u)
}

// UpdateUser mocks base method
func (m *MockStorage) UpdateUser(u, n *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", u, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockStorageMockRecorder) UpdateUser(u, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStorage)(nil).UpdateUser), u, n)
}

// GetSession mocks base method
func (m *MockStorage) GetSession(s *session.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSession indicates an expected call of GetSession
func (mr *MockStorageMockRecorder) GetSession(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStorage)(nil).GetSession), s)
}

// AddSession mocks base method
func (m *MockStorage) AddSession(s *session.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSession indicates an expected call of AddSession
func (mr *MockStorageMockRecorder) AddSession(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockStorage)(nil).AddSession), s)
}

// GetLots mocks base method
func (m *MockStorage) GetLots(condition lot.Lot) ([]lot.Lot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLots", condition)
	ret0, _ := ret[0].([]lot.Lot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLots indicates an expected call of GetLots
func (mr *MockStorageMockRecorder) GetLots(condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLots", reflect.TypeOf((*MockStorage)(nil).GetLots), condition)
}

// GetLot mocks base method
func (m *MockStorage) GetLot(l *lot.Lot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLot", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLot indicates an expected call of GetLot
func (mr *MockStorageMockRecorder) GetLot(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLot", reflect.TypeOf((*MockStorage)(nil).GetLot), l)
}

// GetOwnLots mocks base method
func (m *MockStorage) GetOwnLots(l, r *lot.Lot) ([]lot.Lot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnLots", l, r)
	ret0, _ := ret[0].([]lot.Lot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnLots indicates an expected call of GetOwnLots
func (mr *MockStorageMockRecorder) GetOwnLots(l, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnLots", reflect.TypeOf((*MockStorage)(nil).GetOwnLots), l, r)
}

// BuyLot mocks base method
func (m *MockStorage) BuyLot(id, owner, price int) (lot.Lot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyLot", id, owner, price)
	ret0, _ := ret[0].(lot.Lot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyLot indicates an expected call of BuyLot
func (mr *MockStorageMockRecorder) BuyLot(id, owner, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyLot", reflect.TypeOf((*MockStorage)(nil).BuyLot), id, owner, price)
}

// AddLot mocks base method
func (m *MockStorage) AddLot(l *lot.Lot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLot", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLot indicates an expected call of AddLot
func (mr *MockStorageMockRecorder) AddLot(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLot", reflect.TypeOf((*MockStorage)(nil).AddLot), l)
}

// UpdateLot mocks base method
func (m *MockStorage) UpdateLot(n *lot.Lot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLot", n)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLot indicates an expected call of UpdateLot
func (mr *MockStorageMockRecorder) UpdateLot(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLot", reflect.TypeOf((*MockStorage)(nil).UpdateLot), n)
}

// DeleteLot mocks base method
func (m *MockStorage) DeleteLot(l *lot.Lot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLot", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLot indicates an expected call of DeleteLot
func (mr *MockStorageMockRecorder) DeleteLot(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLot", reflect.TypeOf((*MockStorage)(nil).DeleteLot), l)
}

// CloseLots mocks base method
func (m *MockStorage) CloseLots() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLots")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseLots indicates an expected call of CloseLots
func (mr *MockStorageMockRecorder) CloseLots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLots", reflect.TypeOf((*MockStorage)(nil).CloseLots))
}
